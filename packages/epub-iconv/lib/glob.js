"use strict";
/**
 * Created by user on 2019/7/31.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fast_glob_1 = require("@bluelovers/fast-glob");
const Bluebird = require("bluebird");
const fs_1 = require("./fs");
const path = require("path");
const fs_extra_1 = require("fs-extra");
const debug_color2_1 = require("debug-color2");
function _toArray(pattern) {
    if (!Array.isArray(pattern)) {
        pattern = [pattern];
    }
    return pattern
        .filter(v => v)
        .map(v => v.replace(/\\/g, '/'));
}
exports._toArray = _toArray;
function handleGlob(pattern, options) {
    options = options || {};
    const { cwd = process.cwd(), showLog = true } = options;
    const { output = cwd } = options;
    const startTime = Date.now();
    return Bluebird.resolve(pattern)
        .then(pattern => _toArray(pattern))
        .then(pattern => fast_glob_1.default.async(pattern, {
        cwd,
    }))
        .tap(ls => {
        if (!ls.length) {
            return Bluebird.reject(`沒有找到任何符合條件的 epub`);
        }
    })
        .map(file => {
        const fullpath = path.resolve(cwd, file);
        return Bluebird.props({
            root: cwd,
            file,
            fullpath,
            buffer: fs_1.handleZipFile(fullpath, options),
        })
            .then(async (ret) => {
            let output_path;
            let { name, ext } = path.parse(ret.file);
            let idx = 0;
            do {
                let padend = '';
                if (idx) {
                    padend = `_${idx}`;
                }
                output_path = path.join(output, name + padend + ext);
                idx++;
            } while (fs_extra_1.pathExistsSync(output_path));
            await fs_extra_1.outputFile(output_path, ret.buffer);
            return {
                ...ret,
                output_path,
            };
        })
            .tap(ret => {
            if (showLog) {
                debug_color2_1.console.info(ret.file, `=>`, ret.output_path);
            }
        });
    })
        .tap(ls => {
        if (showLog) {
            debug_color2_1.console.success(`處理完成，總共處理 ${ls.length} 檔案`, `費時`, Date.now() - startTime, 'ms');
        }
    });
}
exports.handleGlob = handleGlob;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2xvYi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImdsb2IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBOztHQUVHOztBQUVILHFEQUE4RTtBQUc5RSxxQ0FBc0M7QUFFdEMsNkJBQXFDO0FBQ3JDLDZCQUE2QjtBQUM3Qix1Q0FBc0Q7QUFDdEQsK0NBQXVDO0FBVXZDLFNBQWdCLFFBQVEsQ0FBQyxPQUFnQztJQUV4RCxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFDM0I7UUFDQyxPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsQ0FBQztLQUNwQjtJQUVELE9BQU8sT0FBTztTQUNaLE1BQU0sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQ2hDO0FBQ0YsQ0FBQztBQVhELDRCQVdDO0FBRUQsU0FBZ0IsVUFBVSxDQUFDLE9BQStDLEVBQUUsT0FBK0I7SUFFMUcsT0FBTyxHQUFHLE9BQU8sSUFBSSxFQUFFLENBQUM7SUFDeEIsTUFBTSxFQUFFLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxFQUFFLEVBQUUsT0FBTyxHQUFHLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQztJQUN4RCxNQUFNLEVBQUUsTUFBTSxHQUFHLEdBQUcsRUFBRSxHQUFHLE9BQU8sQ0FBQztJQUVqQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFFN0IsT0FBTyxRQUFRLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztTQUM5QixJQUFJLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDbEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsbUJBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFO1FBQ3hDLEdBQUc7S0FDSCxDQUFDLENBQUM7U0FDRixHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFFVCxJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sRUFDZDtZQUNDLE9BQU8sUUFBUSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO1NBQzFDO0lBRUYsQ0FBQyxDQUFDO1NBQ0QsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1FBQ1gsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFekMsT0FBTyxRQUFRLENBQUMsS0FBSyxDQUFDO1lBQ3JCLElBQUksRUFBRSxHQUFHO1lBQ1QsSUFBSTtZQUNKLFFBQVE7WUFDUixNQUFNLEVBQUUsa0JBQWEsQ0FBQyxRQUFRLEVBQUUsT0FBTyxDQUFDO1NBQ3hDLENBQUM7YUFDQSxJQUFJLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBRW5CLElBQUksV0FBbUIsQ0FBQztZQUN4QixJQUFJLEVBQUUsSUFBSSxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRXpDLElBQUksR0FBRyxHQUFHLENBQUMsQ0FBQztZQUVaLEdBQ0E7Z0JBQ0MsSUFBSSxNQUFNLEdBQVcsRUFBRSxDQUFDO2dCQUV4QixJQUFJLEdBQUcsRUFDUDtvQkFDQyxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQUUsQ0FBQztpQkFDbkI7Z0JBRUQsV0FBVyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksR0FBRyxNQUFNLEdBQUcsR0FBRyxDQUFDLENBQUM7Z0JBQ3JELEdBQUcsRUFBRSxDQUFDO2FBQ04sUUFDTSx5QkFBYyxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBRXBDLE1BQU0scUJBQVUsQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRTFDLE9BQU87Z0JBQ04sR0FBRyxHQUFHO2dCQUNOLFdBQVc7YUFDWCxDQUFBO1FBQ0YsQ0FBQyxDQUFDO2FBQ0QsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ1YsSUFBSSxPQUFPLEVBQ1g7Z0JBQ0Msc0JBQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFBO2FBQzdDO1FBQ0YsQ0FBQyxDQUFDLENBQ0Q7SUFDSCxDQUFDLENBQUM7U0FDRCxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUU7UUFFVCxJQUFJLE9BQU8sRUFDWDtZQUNDLHNCQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxDQUFDLE1BQU0sS0FBSyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEdBQUcsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFBO1NBQ2hGO0lBRUYsQ0FBQyxDQUFDLENBQ0Y7QUFDRixDQUFDO0FBM0VELGdDQTJFQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ3JlYXRlZCBieSB1c2VyIG9uIDIwMTkvNy8zMS5cbiAqL1xuXG5pbXBvcnQgRmFzdEdsb2IsIHsgT3B0aW9ucyBhcyBJRmFzdEdsb2JPcHRpb25zIH0gZnJvbSAnQGJsdWVsb3ZlcnMvZmFzdC1nbG9iJztcbmltcG9ydCB7IElUU1Jlc29sdmFibGUsIElUU1ZhbHVlT3JBcnJheSB9IGZyb20gJ3RzLXR5cGUnO1xuaW1wb3J0IHsgSUVwdWJJY29udk9wdGlvbnMgfSBmcm9tICcuL2J1ZmZlcic7XG5pbXBvcnQgQmx1ZWJpcmQgPSByZXF1aXJlKCdibHVlYmlyZCcpO1xuaW1wb3J0IEpTWmlwID0gcmVxdWlyZSgnanN6aXAnKTtcbmltcG9ydCB7IGhhbmRsZVppcEZpbGUgfSBmcm9tICcuL2ZzJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgeyBvdXRwdXRGaWxlLCBwYXRoRXhpc3RzU3luYyB9IGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCB7IGNvbnNvbGUgfSBmcm9tICdkZWJ1Zy1jb2xvcjInO1xuaW1wb3J0IHsgdXBhdGggfSBmcm9tICd1cGF0aDIvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUVwdWJJY29udkdsb2JPcHRpb25zIGV4dGVuZHMgSUVwdWJJY29udk9wdGlvbnNcbntcblx0Y3dkPzogc3RyaW5nLFxuXHRvdXRwdXQ/OiBzdHJpbmcsXG5cdHNob3dMb2c/OiBib29sZWFuLFxufVxuXG5leHBvcnQgZnVuY3Rpb24gX3RvQXJyYXkocGF0dGVybjogSVRTVmFsdWVPckFycmF5PHN0cmluZz4pXG57XG5cdGlmICghQXJyYXkuaXNBcnJheShwYXR0ZXJuKSlcblx0e1xuXHRcdHBhdHRlcm4gPSBbcGF0dGVybl07XG5cdH1cblxuXHRyZXR1cm4gcGF0dGVyblxuXHRcdC5maWx0ZXIodiA9PiB2KVxuXHRcdC5tYXAodiA9PiB2LnJlcGxhY2UoL1xcXFwvZywgJy8nKSlcblx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFuZGxlR2xvYihwYXR0ZXJuOiBJVFNSZXNvbHZhYmxlPElUU1ZhbHVlT3JBcnJheTxzdHJpbmc+Piwgb3B0aW9ucz86IElFcHViSWNvbnZHbG9iT3B0aW9ucylcbntcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdGNvbnN0IHsgY3dkID0gcHJvY2Vzcy5jd2QoKSwgc2hvd0xvZyA9IHRydWUgfSA9IG9wdGlvbnM7XG5cdGNvbnN0IHsgb3V0cHV0ID0gY3dkIH0gPSBvcHRpb25zO1xuXG5cdGNvbnN0IHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG5cblx0cmV0dXJuIEJsdWViaXJkLnJlc29sdmUocGF0dGVybilcblx0XHQudGhlbihwYXR0ZXJuID0+IF90b0FycmF5KHBhdHRlcm4pKVxuXHRcdC50aGVuKHBhdHRlcm4gPT4gRmFzdEdsb2IuYXN5bmMocGF0dGVybiwge1xuXHRcdFx0Y3dkLFxuXHRcdH0pKVxuXHRcdC50YXAobHMgPT4ge1xuXG5cdFx0XHRpZiAoIWxzLmxlbmd0aClcblx0XHRcdHtcblx0XHRcdFx0cmV0dXJuIEJsdWViaXJkLnJlamVjdChg5rKS5pyJ5om+5Yiw5Lu75L2V56ym5ZCI5qKd5Lu255qEIGVwdWJgKVxuXHRcdFx0fVxuXG5cdFx0fSlcblx0XHQubWFwKGZpbGUgPT4ge1xuXHRcdFx0Y29uc3QgZnVsbHBhdGggPSBwYXRoLnJlc29sdmUoY3dkLCBmaWxlKTtcblxuXHRcdFx0cmV0dXJuIEJsdWViaXJkLnByb3BzKHtcblx0XHRcdFx0cm9vdDogY3dkLFxuXHRcdFx0XHRmaWxlLFxuXHRcdFx0XHRmdWxscGF0aCxcblx0XHRcdFx0YnVmZmVyOiBoYW5kbGVaaXBGaWxlKGZ1bGxwYXRoLCBvcHRpb25zKSxcblx0XHRcdH0pXG5cdFx0XHRcdC50aGVuKGFzeW5jIChyZXQpID0+IHtcblxuXHRcdFx0XHRcdGxldCBvdXRwdXRfcGF0aDogc3RyaW5nO1xuXHRcdFx0XHRcdGxldCB7IG5hbWUsIGV4dCB9ID0gcGF0aC5wYXJzZShyZXQuZmlsZSk7XG5cblx0XHRcdFx0XHRsZXQgaWR4ID0gMDtcblxuXHRcdFx0XHRcdGRvXG5cdFx0XHRcdFx0e1xuXHRcdFx0XHRcdFx0bGV0IHBhZGVuZDogc3RyaW5nID0gJyc7XG5cblx0XHRcdFx0XHRcdGlmIChpZHgpXG5cdFx0XHRcdFx0XHR7XG5cdFx0XHRcdFx0XHRcdHBhZGVuZCA9IGBfJHtpZHh9YDtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0b3V0cHV0X3BhdGggPSBwYXRoLmpvaW4ob3V0cHV0LCBuYW1lICsgcGFkZW5kICsgZXh0KTtcblx0XHRcdFx0XHRcdGlkeCsrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAocGF0aEV4aXN0c1N5bmMob3V0cHV0X3BhdGgpKTtcblxuXHRcdFx0XHRcdGF3YWl0IG91dHB1dEZpbGUob3V0cHV0X3BhdGgsIHJldC5idWZmZXIpO1xuXG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdC4uLnJldCxcblx0XHRcdFx0XHRcdG91dHB1dF9wYXRoLFxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdFx0LnRhcChyZXQgPT4ge1xuXHRcdFx0XHRcdGlmIChzaG93TG9nKVxuXHRcdFx0XHRcdHtcblx0XHRcdFx0XHRcdGNvbnNvbGUuaW5mbyhyZXQuZmlsZSwgYD0+YCwgcmV0Lm91dHB1dF9wYXRoKVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSlcblx0XHRcdFx0O1xuXHRcdH0pXG5cdFx0LnRhcChscyA9PiB7XG5cblx0XHRcdGlmIChzaG93TG9nKVxuXHRcdFx0e1xuXHRcdFx0XHRjb25zb2xlLnN1Y2Nlc3MoYOiZleeQhuWujOaIkO+8jOe4veWFseiZleeQhiAke2xzLmxlbmd0aH0g5qqU5qGIYCwgYOiyu+aZgmAsIERhdGUubm93KCkgLSBzdGFydFRpbWUsICdtcycpXG5cdFx0XHR9XG5cblx0XHR9KVxuXHQ7XG59Il19
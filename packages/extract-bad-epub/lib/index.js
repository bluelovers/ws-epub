"use strict";
/**
 * Created by user on 2019/7/10.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const JSZip = require("jszip");
const Bluebird = require("bluebird");
const fs_iconv_1 = require("fs-iconv");
const iconv_jschardet_1 = require("iconv-jschardet");
const jsdom_extra_1 = require("jsdom-extra");
const html_minifier_1 = require("html-minifier");
const upath2_1 = require("upath2");
const mdconf2_1 = require("mdconf2");
const debug_color2_1 = require("debug-color2");
exports.console = new debug_color2_1.Console(null, {
    enabled: true,
    inspectOptions: {
        colors: true,
    },
    chalkOptions: {
        enabled: true,
    },
});
exports.console.enabledColor = true;
function autoExtract(srcFile, setting) {
    return load(srcFile)
        .tap(async (data) => {
        const cwd = setting && setting.cwd || upath2_1.default.join(process.cwd(), fixFilename(upath2_1.default.basename(srcFile)));
        let options = {
            ...data,
            cwd,
        };
        exports.console.dir({
            srcFile,
            cwd,
        });
        return Bluebird.all([
            saveTxt(options),
            saveAttach(options)
        ]);
    });
}
exports.autoExtract = autoExtract;
exports.default = autoExtract;
function fixFilename(file) {
    return fs_iconv_1.trimFilename(decodeURIComponent(file));
}
exports.fixFilename = fixFilename;
function buffer(buf, cache = {}) {
    return Bluebird.resolve(JSZip.loadAsync(buf, {
        decodeFileName(bytes) {
            return decodeURIComponent(iconv_jschardet_1.decode(bytes));
        },
    }))
        .then(async (zip) => {
        let txts = await files(zip.file(/\.(?:xhtml|html?)$/), cache);
        return Bluebird.props({
            zip,
            txts,
            files: zip.files,
            cache,
        });
    });
}
exports.buffer = buffer;
function files(files, cache = {}) {
    if (cache._attach == null) {
        cache._attach = {};
    }
    return Bluebird.resolve(files)
        .map(async (file, index) => {
        let buf = await file.async("nodebuffer")
            .then(iconv_jschardet_1.decode)
            .then(buf => {
            try {
                return fixHtml(buf.toString());
            }
            catch (e) {
            }
            return buf;
        });
        let jsdom = await jsdom_extra_1.asyncJSDOM(buf);
        let { $, document } = jsdom;
        let title = document.title;
        let _parse = upath2_1.default.parse(file.name);
        let _id = fixFilename(_parse.name).replace(/[^\w_\-]+/g, '').slice(0, 20);
        // @ts-ignore
        cache._attach[_parse.dir] = cache._attach[_parse.dir] || {};
        cache._attach[_parse.dir].images = cache._attach[_parse.dir].images || {};
        let imgs = {};
        $('img').each((i, elem) => {
            let _this = $(elem);
            let src = (_this.attr('src') || '').trim();
            if (src) {
                let _name = _id + i.toString().padStart(3, '0');
                while (cache._attach[_parse.dir].images[_name] != null) {
                    _name = _id + (++i).toString().padStart(3, '0');
                }
                src = decodeURIComponent(src);
                imgs[_name] = src;
                cache._attach[_parse.dir].images[_name] = src;
                _this.after(`\n(圖片${_name})\n`);
                _this.remove();
            }
        });
        let innerText = $(document.body)
            .text()
            .replace(/^\n{2,}|\n{2,}$/g, '\n');
        return {
            index,
            name: file.name,
            isDir: file.dir,
            title,
            innerText,
            imgs,
        };
    });
}
exports.files = files;
function saveAttach(options) {
    return Bluebird.resolve(Object.entries(options.cache._attach))
        .map(async ([dir, data]) => {
        let cwd = upath2_1.default.join(options.cwd, dir);
        await Bluebird
            .resolve(Object.entries(data.images))
            .map(async ([id, src], index, length) => {
            let _img = upath2_1.default.join(dir, src);
            let _img_path = upath2_1.default.join(cwd, src);
            return Bluebird
                .resolve(options.zip.file(_img))
                .then(v => v.async('nodebuffer'))
                .then(buf => {
                exports.console.gray(`[img][${padNum(index)}/${padNum(length)}]`, _img_path);
                return fs_iconv_1.outputFile(_img_path, buf);
            })
                .catch(e => {
                exports.console.error(e.message, {
                    dir,
                    name: src,
                    _img,
                });
            });
        });
        return fs_iconv_1.outputFile(upath2_1.default.join(cwd, 'ATTACH.md'), mdconf2_1.stringify({
            attach: data,
        }));
    });
}
exports.saveAttach = saveAttach;
function load(file, cache = {}) {
    return Bluebird.resolve(fs_iconv_1.readFile(file)).then(buf => buffer(buf, cache));
}
exports.load = load;
function padNum(n) {
    return n.toString().padStart(3, '0');
}
exports.padNum = padNum;
function saveTxt(options) {
    return Bluebird
        .resolve(options.txts)
        .map(async (file, index, length) => {
        let _parse = upath2_1.default.parse(file.name);
        let filename = upath2_1.default.join(options.cwd, _parse.dir, _parse.name + '_' + fixFilename(file.title) + '.txt');
        exports.console.gray.log(`[txt][${padNum(index)}/${padNum(length)}]`, filename);
        await fs_iconv_1.outputFile(filename, file.innerText);
        return filename;
    });
}
exports.saveTxt = saveTxt;
function fixHtml(html) {
    return html_minifier_1.minify(html, {
        collapseWhitespace: true,
        preserveLineBreaks: true,
        conservativeCollapse: true,
        caseSensitive: true,
    });
}
exports.fixHtml = fixHtml;
//# sourceMappingURL=data:application/json;base64,